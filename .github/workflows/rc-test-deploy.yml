name: "run tests & deploy to test"

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches: [ master ]

jobs:
  rc-test:
    if: contains(toJSON(github.head_ref), 'release/') || contains(toJSON(github.head_ref), 'hotfix/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Run Unit Tests
        run: go test main_test.go

  rc-deploy:
    needs: [ rc-test ]
    runs-on: ubuntu-latest
    environment: test
    steps:
      # 1. Setup
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      # 2. Sets & print variables
      - name: Sets variables
        id: variables
        run: |
          git fetch --prune --prune-tags origin
          
          # 1. Get tags
          LATEST_TAG=$(git describe --tags "$(git rev-list --tags --max-count=1)")
          TAG_LIST=($(echo $LATEST_TAG | tr '.' ' '))
          [[ "${#TAG_LIST[@]}" -ne 2 ]] && echo "$RELEASE_VERSION is not a valid version" && exit 1
          
          # 2. Set release version
          if [[ "$GITHUB_HEAD_REF" == release* ]]
          then
            RELEASE_VERSION=$(( TAG_LIST[0] + 1 )).0;
          else
            RELEASE_VERSION=${TAG_LIST[0]}.$(( TAG_LIST[1] + 1));
          fi
          
          # 3. Set var
          IMAGE_TAG=${RELEASE_VERSION}-$(git rev-parse --short=4 HEAD)-rc
          
          # 4. Set var as env
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Print variables
        run: |
          echo "IMAGE_TAG=$IMAGE_TAG"
          echo "IMAGE_REGISTRY=$IMAGE_REGISTRY"

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image
        run: docker build -t $IMAGE_REGISTRY:$IMAGE_TAG .

      - name: Push image
        run: docker push $IMAGE_REGISTRY:$IMAGE_TAG