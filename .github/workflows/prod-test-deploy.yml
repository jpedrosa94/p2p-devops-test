name: "run tests & deploy to prod"

on:
  pull_request:
    types: [ closed ]
    branches: [ master ]

jobs:
  prod-test:
    runs-on: ubuntu-latest
    if: (contains(toJSON(github.head_ref), 'release/') || contains(toJSON(github.head_ref), 'hotfix/')) && github.event.pull_request.merged == true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Run Unit Tests
        run: go test main_test.go

  prod-deploy:
    needs: [ prod-test ]
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Sets variables
        id: variables
        run: |
          git fetch --prune --prune-tags origin
          
          # 1. Get tags
          LATEST_TAG=$(git describe --tags "$(git rev-list --tags --max-count=1)")
          TAG_LIST=($(echo $LATEST_TAG | tr '.' ' '))
          [[ "${#TAG_LIST[@]}" -ne 2 ]] && echo "$RELEASE_VERSION is not a valid version" && exit 1
          
          # 2. Set release version
          if [[ "$GITHUB_HEAD_REF" == release* ]]
          then
           RELEASE_VERSION=$(( TAG_LIST[0] + 1 )).0;
          else
           RELEASE_VERSION=${TAG_LIST[0]}.$(( TAG_LIST[1] + 1));
          fi
          
          # 3. Set vars
          IMAGE_REGISTRY="${{ vars.IMAGE_REGISTRY }}"
          IMAGE_TAG=${RELEASE_VERSION}-$(git rev-parse --short=4 HEAD)
          
          # 4. Set vars as env
          echo "IMAGE_REGISTRY=$IMAGE_REGISTRY" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

      - name: Print variables
        run: |
          echo "IMAGE_TAG=$IMAGE_TAG"
          echo "IMAGE_REGISTRY=$IMAGE_REGISTRY"

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image
        run: docker build -t $IMAGE_REGISTRY:$IMAGE_TAG .

      - name: Push image
        run: docker push $IMAGE_REGISTRY:$IMAGE_TAG

  prod-create-release:
    needs: [ prod-deploy ]
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git tag -a $RELEASE_VERSION -m "release: $RELEASE_VERSION"
          git push origin $RELEASE_VERSION
          gh release create $RELEASE_VERSION --title "$RELEASE_VERSION" --generate-notes

  prod-create-pull-request:
    needs: [ prod-deploy ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Open PR to align develop with master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          BRANCH_NAME="merge/$RELEASE_VERSION"
          git checkout -b $BRANCH_NAME
          
          git merge origin/master
          git commit --allow-empty -am "Merge master into develop"
          git push origin "$BRANCH_NAME"
          
          gh pr create --base develop --head "$BRANCH_NAME" --title "Merge - $RELEASE_VERSION" --fill