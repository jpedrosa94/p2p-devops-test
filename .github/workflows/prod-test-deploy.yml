name: "run tests & deploy to prod"

on: workflow_dispatch
#on:
#  pull_request:
#    types: [ closed ]
#    branches: [ master ]

jobs:
  prod-test:
    runs-on: ubuntu-latest
    if: (contains(toJSON(github.head_ref), 'release/') || contains(toJSON(github.head_ref), 'hotfix/')) && github.event.pull_request.merged == true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Run Unit Tests
        run: go test main_test.go

  prod-deploy:
#    needs: [ prod-test ]
    runs-on: ubuntu-latest
    environment: prod
    outputs:
      output: ${{ steps.variables.outputs.test }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Sets variables
        id: variables
        run: |
          git fetch --prune --prune-tags origin
          
          # 1. Get tags
          LATEST_TAG=$(git describe --tags "$(git rev-list --tags --max-count=1)")
          TAG_LIST=($(echo $LATEST_TAG | tr '.' ' '))
          [[ "${#TAG_LIST[@]}" -ne 2 ]] && echo "$RELEASE_VERSION is not a valid version" && exit 1
          
          # 2. Set release version
          if [[ "$GITHUB_HEAD_REF" == release* ]]
          then
           RELEASE_VERSION=$(( TAG_LIST[0] + 1 )).0;
          else
           RELEASE_VERSION=${TAG_LIST[0]}.$(( TAG_LIST[1] + 1));
          fi
          
          # 3. Set vars
          IMAGE_REGISTRY="${{ vars.IMAGE_REGISTRY }}"
          IMAGE_TAG=${RELEASE_VERSION}-$(git rev-parse --short=4 HEAD)
          
          # 4. Set vars as env and ouputs
          echo "IMAGE_REGISTRY=$IMAGE_REGISTRY" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo $RELEASE_VERSION
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          
          echo "RELEASE_VERSION='$RELEASE_VERSION'" >> $GITHUB_OUTPUT

#      - name: Print variables
#        run: |
#          echo "IMAGE_TAG=$IMAGE_TAG"
#          echo "IMAGE_REGISTRY=$IMAGE_REGISTRY"
#
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build image
#        run: docker build -t $IMAGE_REGISTRY:$IMAGE_TAG .
#
#      - name: Run Trivy vulnerability scanner
#        uses: aquasecurity/trivy-action@0.20.0
#        with:
#          image-ref: 'docker.io/${{ env.IMAGE_REGISTRY }}:${{ env.IMAGE_TAG }}'
#          format: 'table'
#          exit-code: '1'
#          ignore-unfixed: true
#          vuln-type: 'os,library'
#          severity: 'CRITICAL,HIGH'
#
#      - name: Push image
#        run: docker push $IMAGE_REGISTRY:$IMAGE_TAG
#
#      - name: Set variables
#        run: |
#          echo "FILE_PATH=charts/webapp/values-prod.yaml" >> $GITHUB_ENV
#
#      - name: Update image tag in YAML file
#        run: |
#          sed -i 's/^  tag: .*/  tag: '"${{ env.IMAGE_TAG }}"'/' ${{ env.FILE_PATH }}
#          cat charts/webapp/values-prod.yaml
#
#      - name: Commit and push changes
#        uses: stefanzweifel/git-auto-commit-action@v4
#        with:
#          commit_message: "Update image tag to ${{ env.IMAGE_TAG }}"
#          branch: master
#          file_pattern: ${{ env.FILE_PATH }}

  prod-create-release:
    needs: [ prod-deploy ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo ${{ needs.prod-deploy.outputs.RELEASE_VERSION }}
#          git config --global user.email "bot@local"
#          git config --global user.name "release[bot]"
#          git tag -a $RELEASE_VERSION -m "release: $RELEASE_VERSION"
#          git push origin $RELEASE_VERSION
#          gh release create $RELEASE_VERSION --title "$RELEASE_VERSION" --generate-notes

  prod-create-pull-request:
    needs: [ prod-deploy ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Open PR to align develop with master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          RELEASE_VERSION: ${{ needs.prod-deploy.outputs.RELEASE_VERSION }}
        run: |
          echo ${{ needs.prod-deploy.outputs.RELEASE_VERSION }}
#          BRANCH_NAME="merge/$RELEASE_VERSION"
#          git checkout -b $BRANCH_NAME
#
#          git merge origin/master
#          git commit --allow-empty -am "Merge master into develop"
#          git push origin "$BRANCH_NAME"
#
#          gh pr create --base develop --head "$BRANCH_NAME" --title "Merge - $RELEASE_VERSION" --fill

  job1:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
    steps:
      - id: step1
        run: echo "test=hello" >> "$GITHUB_OUTPUT"
      - id: step2
        run: echo "test=world" >> "$GITHUB_OUTPUT"
  job2:
    runs-on: ubuntu-latest
    needs: job1
    steps:
      - env:
          OUTPUT1: ${{needs.job1.outputs.output1}}
          OUTPUT2: ${{needs.job1.outputs.output2}}
        run: echo "$OUTPUT1 $OUTPUT2"